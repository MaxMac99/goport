/*
 * GoPort API
 *
 * The GoPort API extends the Docker Engine API to connect to remote Hosts by serving a context endpoint. It also adds the ability to manage docker-compose projects.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package impl

import (
	"io"
	"sync"

	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/filters"
	"github.com/docker/docker/client"
	"github.com/gin-gonic/gin"
	"gitlab.com/maxmac99/goport/context"
	"gitlab.com/maxmac99/goport/models"
)

// BuildPrune - Delete builder cache
func BuildPrune(c *gin.Context, opts *models.BuildPruneOpts) (*map[string]models.BuildPruneResponse, error) {
	clients, err := context.ResolveContexts(opts.Context)
	if err != nil {
		return nil, err
	}
	parsedFilters, err := filters.FromJSON(opts.Filters)
	if err != nil {
		return nil, err
	}
	options := types.BuildCachePruneOptions{
		All:         opts.All,
		KeepStorage: opts.KeepStorage,
		Filters:     parsedFilters,
	}

	response := make(map[string]models.BuildPruneResponse, len(clients))
	var mutex sync.RWMutex
	var wg sync.WaitGroup
	wg.Add(len(clients))
	for context, cli := range clients {
		go func(context string, cli client.APIClient) {
			prune, err := cli.BuildCachePrune(c, options)
			if err != nil {
				wg.Done()
				return
			}
			mutex.Lock()
			response[context] = models.BuildPruneResponse{
				CachesDeleted:  prune.CachesDeleted,
				SpaceReclaimed: prune.SpaceReclaimed,
			}
			mutex.Unlock()
			wg.Done()
		}(context, cli)
	}
	wg.Wait()
	return &response, nil
}

// BuildCancel - Cancel a Build
func BuildCancel(c *gin.Context, opts *models.BuildCancelOpts) error {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return err
	}
	return client.BuildCancel(c, opts.Id)
}

// ImageBuild - Build an image
func ImageBuild(c *gin.Context, opts *models.ImageBuildOpts) (func(w io.Writer) bool, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	options := models.MapImageBuildFromOptions(*opts)
	response, err := client.ImageBuild(c, c.Request.Body, options)
	if err != nil {
		return nil, err
	}
	return StreamReadingResponse(c, response.Body), nil
}

// ImageCommit - Create a new image from a container
func ImageCommit(c *gin.Context, opts *models.ImageCommitOpts) (*models.IdResponse, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	options := models.MapImageCommitFromOptions(*opts)
	response, err := client.ContainerCommit(c, opts.Container, options)
	if err != nil {
		return nil, err
	}
	return &models.IdResponse{
		Id: response.ID,
	}, nil
}

// ImageCreate - Create an image
func ImageCreate(c *gin.Context, opts *models.ImageCreateOpts) (func(w io.Writer) bool, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	var response io.ReadCloser
	if opts.FromImage != "" {
		all := false
		tag := ""
		if opts.Tag != nil {
			all = *opts.Tag == ""
			tag = *opts.Tag
		}
		options := types.ImagePullOptions{
			All:           all,
			RegistryAuth:  opts.RegistryAuth,
			PrivilegeFunc: nil,
			Platform:      opts.Platform,
		}
		reference := opts.FromImage
		if tag != "" {
			reference += ":" + tag
		}
		response, err = client.ImagePull(c, reference, options)
	} else {
		source := types.ImageImportSource{
			Source:     c.Request.Body,
			SourceName: opts.FromSrc,
		}
		tag := ""
		if opts.Tag != nil {
			tag = *opts.Tag
		}
		options := types.ImageImportOptions{
			Tag:      tag,
			Message:  opts.Message,
			Changes:  []string{},
			Platform: opts.Platform,
		}
		response, err = client.ImageImport(c, source, opts.Repo, options)
	}
	if err != nil {
		return nil, err
	}
	if opts.Quiet {
		return nil, nil
	}
	return StreamReadingResponse(c, response), nil
}

// ImageDelete - Remove an image
func ImageDelete(c *gin.Context, opts *models.ImageDeleteOpts) (*[]models.ImageDeleteResponseItem, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	options := types.ImageRemoveOptions{
		Force:         opts.Force,
		PruneChildren: !opts.Noprune,
	}
	response, err := client.ImageRemove(c, opts.Name, options)
	if err != nil {
		return nil, err
	}
	var modelResponse []models.ImageDeleteResponseItem
	for _, item := range response {
		modelResponse = append(modelResponse, models.ImageDeleteResponseItem{
			Untagged: item.Untagged,
			Deleted:  item.Deleted,
		})
	}
	return &modelResponse, nil
}

// ImageHistory - Get the history of an image
func ImageHistory(c *gin.Context, opts *models.ImageHistoryOpts) (*[]models.HistoryResponseItem, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	response, err := client.ImageHistory(c, opts.Name)
	if err != nil {
		return nil, err
	}
	var modelResponse []models.HistoryResponseItem
	for _, item := range response {
		tags := make([]string, 0)
		if len(item.Tags) > 0 {
			tags = item.Tags
		}
		modelResponse = append(modelResponse, models.HistoryResponseItem{
			Id:        item.ID,
			Created:   item.Created,
			CreatedBy: item.CreatedBy,
			Tags:      tags,
			Size:      item.Size,
			Comment:   item.Comment,
		})
	}
	return &modelResponse, nil
}

// ImageInspect - Inspect an image
func ImageInspect(c *gin.Context, opts *models.ImageInspectOpts) (*types.ImageInspect, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	response, _, err := client.ImageInspectWithRaw(c, opts.Name)
	if err != nil {
		return nil, err
	}
	return &response, nil
}

// ImageList - List Images
func ImageList(c *gin.Context, opts *models.ImageListOpts) (*map[string][]models.ImageSummary, error) {
	clients, err := context.ResolveContexts(opts.Context)
	if err != nil {
		return nil, err
	}
	parsedFilters, err := filters.FromJSON(opts.Filters)
	if err != nil {
		return nil, err
	}
	options := types.ImageListOptions{
		All:     opts.All,
		Filters: parsedFilters,
	}
	output := make(map[string][]models.ImageSummary, len(clients))
	var mutex sync.RWMutex
	var wg sync.WaitGroup
	wg.Add(len(clients))
	for context, cli := range clients {
		go func(context string, cli client.APIClient) {
			list, err := cli.ImageList(c, options)
			if err != nil {
				wg.Done()
				return
			}
			var contextItems []models.ImageSummary
			for _, item := range list {
				contextItems = append(contextItems, models.MapToImageSummary(item))
			}
			mutex.Lock()
			output[context] = contextItems
			mutex.Unlock()
			wg.Done()
		}(context, cli)
	}
	wg.Wait()
	return &output, nil
}

// ImageLoad - Import images
func ImageLoad(c *gin.Context, opts *models.ImageLoadOpts) (func(w io.Writer) bool, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	response, err := client.ImageLoad(c, c.Request.Body, opts.Quiet)
	if err != nil {
		return nil, err
	}
	return StreamReadingResponse(c, response.Body), nil
}

// ImagePrune - Delete unused images
func ImagePrune(c *gin.Context, opts *models.ImagePruneOpts) (*map[string]models.ImagePruneResponseItem, error) {
	clients, err := context.ResolveContexts(opts.Context)
	if err != nil {
		return nil, err
	}
	parsedFilters, err := filters.FromJSON(opts.Filters)
	if err != nil {
		return nil, err
	}
	response := make(map[string]models.ImagePruneResponseItem, len(clients))
	var mutex sync.RWMutex
	var wg sync.WaitGroup
	wg.Add(len(clients))
	for context, cli := range clients {
		go func(context string, cli client.APIClient) {
			pruneResponse, err := cli.ImagesPrune(c, parsedFilters)
			if err != nil {
				wg.Done()
				return
			}
			var imagesDeleted []models.ImageDeleteResponseItem
			var spaceReclaimed uint64
			for _, item := range pruneResponse.ImagesDeleted {
				imagesDeleted = append(imagesDeleted, models.ImageDeleteResponseItem{
					Untagged: item.Untagged,
					Deleted:  item.Deleted,
				})
			}
			spaceReclaimed += pruneResponse.SpaceReclaimed
			mutex.Lock()
			response[context] = models.ImagePruneResponseItem{
				ImagesDeleted:  imagesDeleted,
				SpaceReclaimed: spaceReclaimed,
			}
			mutex.Unlock()
			wg.Done()
		}(context, cli)
	}
	wg.Wait()
	return &response, nil
}

// ImagePush - Push an image
func ImagePush(c *gin.Context, opts *models.ImagePushOpts) (func(w io.Writer) bool, error) {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	options := types.ImagePushOptions{
		All:           false,
		RegistryAuth:  opts.RegistryAuth,
		PrivilegeFunc: func() (string, error) { panic("not implemented") },
		Platform:      "",
	}
	response, err := client.ImagePush(c, opts.Name+":"+opts.Tag, options)
	if err != nil {
		return nil, err
	}
	return StreamReadingResponse(c, response), nil
}

// ImageSearch - Search images
func ImageSearch(c *gin.Context, opts *models.ImageSearchOpts) (*[]models.ImageSearchResponseItem, error) {
	client, err := context.ResolveContext("default")
	if err != nil {
		return nil, err
	}
	parsedFilters, err := filters.FromJSON(opts.Filters)
	if err != nil {
		return nil, err
	}
	options := types.ImageSearchOptions{
		RegistryAuth:  opts.RegistryAuth,
		PrivilegeFunc: nil,
		Filters:       parsedFilters,
		Limit:         opts.Limit,
	}
	result, err := client.ImageSearch(c, opts.Term, options)
	if err != nil {
		return nil, err
	}
	var response []models.ImageSearchResponseItem
	for _, item := range result {
		response = append(response, models.ImageSearchResponseItem{
			Description: item.Description,
			IsOfficial:  item.IsOfficial,
			IsAutomated: item.IsAutomated,
			Name:        item.Name,
			StarCount:   item.StarCount,
		})
	}
	return &response, nil
}

// ImageTag - Tag an image
func ImageTag(c *gin.Context, opts *models.ImageTagOpts) error {
	client, err := context.ResolveContext(opts.Context)
	if err != nil {
		return err
	}
	return client.ImageTag(c, opts.Name, opts.Repo+":"+opts.Tag)
}
