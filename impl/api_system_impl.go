/*
 * GoPort API
 *
 * The GoPort API extends the Docker Engine API to connect to remote Hosts by serving a context endpoint. It also adds the ability to manage docker-compose projects.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package impl

import (
	"encoding/json"
	"io"
	"strconv"
	"sync"

	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/filters"
	"github.com/docker/docker/client"
	"github.com/gin-gonic/gin"
	"github.com/maxmac99/goport/controllers"
	"github.com/maxmac99/goport/models"
)

// SystemDataUsage - Get data usage information
func SystemDataUsage(c *gin.Context, opts *models.SystemDataUsageOpts) (*map[string]types.DiskUsage, error) {
	clients, err := controllers.ResolveContexts(opts.Context)
	if err != nil {
		return nil, err
	}
	output := make(map[string]types.DiskUsage, len(clients))
	var mutex sync.RWMutex
	var wg sync.WaitGroup
	wg.Add(len(clients))
	for context, cli := range clients {
		go func(context string, cli client.APIClient) {
			list, err := cli.DiskUsage(c)
			if err != nil {
				wg.Done()
				return
			}
			mutex.Lock()
			output[context] = list
			mutex.Unlock()
			wg.Done()
		}(context, cli)
	}
	wg.Wait()
	return &output, nil
}

// SystemEvents - Monitor events
func SystemEvents(c *gin.Context, opts *models.SystemEventsOpts) (func(w io.Writer) bool, error) {
	clients, err := controllers.ResolveContexts(opts.Context)
	if err != nil {
		return nil, err
	}
	parsedFilters, err := filters.FromJSON(opts.Filters)
	if err != nil {
		return nil, err
	}
	options := types.EventsOptions{
		Since:   opts.Since,
		Until:   opts.Until,
		Filters: parsedFilters,
	}
	output := make(chan map[string]models.SystemEventsResponse)
	var wg sync.WaitGroup
	wg.Add(len(clients))
	for context, cli := range clients {
		go func(context string, cli client.APIClient) {
			listC, errC := cli.Events(c, options)
			for {
				select {
				case list, ok := <-listC:
					if !ok {
						wg.Done()
						return
					}
					output <- map[string]models.SystemEventsResponse{
						context: {
							Message: list,
						},
					}
				case errI, ok := <-errC:
					if !ok {
						wg.Done()
						return
					}
					output <- map[string]models.SystemEventsResponse{
						context: {
							ErrorMessage: models.ErrorResponse{
								Message: errI.Error(),
							},
						},
					}
				case <-c.Request.Context().Done():
					wg.Done()
					return
				}
			}
		}(context, cli)
	}
	go func() {
		wg.Wait()
		close(output)
	}()
	return func(w io.Writer) bool {
		item, ok := <-output
		if !ok {
			return false
		}
		response, err := json.Marshal(item)
		if err != nil {
			close(output)
			return false
		}
		w.Write(response)
		return true
	}, nil
}

// SystemInfo - Get system information
func SystemInfo(c *gin.Context, opts *models.SystemInfoOpts) (*map[string]types.Info, error) {
	clients, err := controllers.ResolveContexts(opts.Context)
	if err != nil {
		return nil, err
	}
	output := make(map[string]types.Info, len(clients))
	var mutex sync.RWMutex
	var wg sync.WaitGroup
	wg.Add(len(clients))
	for context, cli := range clients {
		go func(context string, cli client.APIClient) {
			list, err := cli.Info(c)
			if err != nil {
				wg.Done()
				return
			}
			mutex.Lock()
			output[context] = list
			mutex.Unlock()
			wg.Done()
		}(context, cli)
	}
	wg.Wait()
	return &output, nil
}

// SystemPing - Ping
func SystemPing(c *gin.Context, opts *models.SystemPingOpts) (*string, error) {
	client, err := controllers.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	response, err := client.Ping(c)
	if err != nil {
		return nil, err
	}
	c.Header("API-Version", response.APIVersion)
	c.Header("Builder-Version", string(response.BuilderVersion))
	c.Header("Docker-Experimental", strconv.FormatBool(response.Experimental))
	c.Header("OSType", response.OSType)
	ok := "OK"
	return &ok, nil
}

// SystemPingHead - Ping
func SystemPingHead(c *gin.Context, opts *models.SystemPingHeadOpts) (*string, error) {
	client, err := controllers.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	response, err := client.Ping(c)
	if err != nil {
		return nil, err
	}
	c.Header("API-Version", response.APIVersion)
	c.Header("Builder-Version", string(response.BuilderVersion))
	c.Header("Docker-Experimental", strconv.FormatBool(response.Experimental))
	c.Header("OSType", response.OSType)
	ok := "OK"
	return &ok, nil
}

// SystemVersion - Get version
func SystemVersion(c *gin.Context, opts *models.SystemVersionOpts) (*types.Version, error) {
	client, err := controllers.ResolveContext(opts.Context)
	if err != nil {
		return nil, err
	}
	response, err := client.ServerVersion(c)
	if err != nil {
		return nil, err
	}
	return &response, nil
}
